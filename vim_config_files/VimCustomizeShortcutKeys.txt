"=========================================================================
"Vim自定义快捷键
" DesCRiption: 适合自己使用的vimrc文件，for Linux/Windows, GUI/Console
" Last Change: 2015年12月24日 15时13分 
" Author: 陈昌栋
" Version: 1.10
"=========================================================================
let mapleader = "," "leader映射为逗号“，”!!!
nnoremap <leader>lr :call NumberToggle()<cr> "<leader>lr" 插入模式下用绝对行号,lr开关绝对行号
"使用Ctrl+Z保存imap，vmap，nmap 
"使用Ctrl+B撤回imap，vmap，nmap
nnoremap <leader>s "    <leader>s 语法高亮开关，关闭语法可以加快大文件的展示
set pastetoggle=<C-Y>            "  Ctrl+Y进入粘贴模式
nnoremap <silent> <Leader>z :ZoomToggle<CR> "   <leader>z 触发放大 (没有作用)
noremap H ^    " H一行第一个字符处        noremap L $    "L一行最后一个字符处
" Map “ ; ” to : and save a million keystrokes 用于快速进入命令行nnoremap ; :
" 搜索相关 "普通模式下 “空格”查找   map <space> /
"  “<leader>.”去掉搜索高亮      noremap <silent><leader>. :nohls<CR>
" y$ -> Y    Make Y behave like other capitals    map Y y$
" 复制选中区到系统剪切板中vnoremap <leader>p "+y
" 全选   map <leader>a ggVG"
" 选择块    nnoremap <leader>v V`}
" <leader>lh   开启/关闭行号显示，用于鼠标复制代码用   nnoremap <leader>lh :call HideNumber()<CR>
" Buffers操作快捷方式   nnoremap <C-RETURN> :bnext<CR>   nnoremap <C-S-RETURN> :bprevious<CR>
" Tab操作快捷方式    nnoremap <C-TAB> :tabnext<CR>       nnoremap <C-S-TAB> :tabprev<CR>
"关于tab的快捷键  map tn :tabnext<CR>      map tp :tabprevious<CR>      map td :tabnew .<CR>
map te :tabedit       map tc :tabclose<CR>

"一些不错的映射转换语法（如果在一个文件中混合了不同语言时有用）
nnoremap <leader>1 :set filetype=c<CR>
nnoremap <leader>2 :set filetype=cpp<CR>
nnoremap <leader>3 :set filetype=python<CR>
nnoremap <leader>4 :set filetype=java<CR>

set fileformats=unix,dos,mac
nmap <leader>fd :se fileformat=dos<CR>
nmap <leader>fu :se fileformat=unix<CR>

"编码格式改变fileencodings=utf-8,cp936,gb2312,gbk,gb18030
nnoremap <leader>gu :set fileencoding=utf-8<CR>
nnoremap <leader>g2 :set fileencoding=gb2312<CR>
nnoremap <leader>g9 :set fileencoding=cp936<CR>
nnoremap <leader>g1 :set fileencoding=gb18030<CR>
nnoremap <leader>gk :set fileencoding=gbk<CR>

" use Ctrl+[l|n|p|cc] to list|next|previous|jump to count the result
map <C-x>l <ESC>:cl<CR>
map <C-x>n <ESC>:cn<CR>
map <C-x>p <ESC>:cp<CR>
map <C-x>c <ESC>:cc<CR>

autocmd FileType python map <F10> :!ipython --pdb %<CR>  “运行Python如果有错误就调试
"-----------------------------------------------------------------
" plugin - bufexplorer.vim Buffers切换
" <leader>be 全屏方式查看全部打开的文件列表
" <leader>bv 左右方式查看 \bs 上下方式查看
"-----------------------------------------------------------------

nnoremap <leader>yj :YcmCompleter GoToDefinitionElseDeclaration<CR>   "按,yj 会跳转到定义
inoremap <leader>y; <C-x><C-o>   " YCM 集成 OmniCppComplete补全引擎，设置其快捷键
" 修改对函数的补全快捷键，默认是CTRL + space，修改为CTRL + Shift + X;  
let g:ycm_key_detailed_diagnostics = '<leader>yd'    "show the full diagnostic
let g:ycm_key_list_select_completion = ['<Down>']
let g:ycm_key_list_previous_completion = ['<Up>']
" 设置转到定义处的快捷键为CTRL + L，这个功能非常赞 
"inoremap <expr><TAB> pumvisible() ? "\<C-n>" : "\<TAB>"   " <TAB> completion.
inoremap <expr> <CR> pumvisible()?"\<C-Y>":"\<CR>"   " 回车即选中当前项
"inoremap <expr> <C-J> pumvisible()?"\<PageDown>\<C-N>\<C-P>":"\<C-X><C-O>"
"inoremap <expr> <C-K> pumvisible()?"\<PageUp>\<C-P>\<C-N>":"\<C-K>"
inoremap <expr> <C-K> pumvisible()?"\<C-E>":"\<C-U>"    "关闭补全列表

"-----------------------------------------------------------------
" plugin - taglist.vim 查看函数列表，需要ctags程序
" F4 打开隐藏taglist窗口
"-----------------------------------------------------------------

"-----------------------------------------------------------------
" plugin - mark.vim 给各种tags标记不同的颜色，便于观看调式的插件。
" <leader>m mark or unmark the word under (or before) the cursor
" <leader>r manually input a regular expression. 用于搜索.
" <leader>n clear this mark (i.e. the mark under the cursor), or clear all highlighted marks .
" <leader>* 当前MarkWord的下一个 \# 当前MarkWord的上一个
" <leader>/ 所有MarkWords的下一个 \? 所有MarkWords的上一个
"-----------------------------------------------------------------

"-----------------------------------------------------------------
" plugin - NERD_tree.vim 以树状方式浏览系统中的文件和目录
" :ERDtree 打开NERD_tree :NERDtreeClose 关闭NERD_tree
" o 打开关闭文件或者目录 t 在标签页中打开
" T 在后台标签页中打开 ! 执行此文件
" p 到上层目录 P 到根目录
" K 到第一个节点 J 到最后一个节点
" u 打开上层目录 m 显示文件系统菜单（添加、删除、移动操作）
" r 递归刷新当前目录 R 递归刷新当前根目录
" F3 NERDTree 切换
"-----------------------------------------------------------------

" F5 Quickfix窗口关闭
map <F5> :ccl<CR>              imap <F5> <ESC>:ccl<CR>

"-----------------------------------------------------------------
" plugin - NERD_commenter.vim 注释代码用的，
" [count] <leader>cc 光标以下count行逐行添加注释(7,cc)
" [count] <leader>cu 光标以下count行逐行取消注释(7,cu)
" [count] <leader>cm 光标以下count行尝试添加块注释(7,cm)
"<leader>cA 在行尾插入 /* */,并且进入插入模式。 这个命令方便写注释。
" 注：count参数可选，无则默认为选中行或当前行
"----------------------------------------------------------------- 

"-----------------------------------------------------------------
" plugin - matchit.vim 对%命令进行扩展使得能在嵌套标签和语句之间跳转
" % 正向匹配 g% 反向匹配
" [% 定位块首 ]% 定位块尾
"-----------------------------------------------------------------

"-----------------------------------------------------------------
" plugin - vcscommand.vim 对%命令进行扩展使得能在嵌套标签和语句之间跳转
" SVN/git管理工具
"-----------------------------------------------------------------

"*****************************************************
"		  EasyGrep配置				      *
"*****************************************************
" F6 开始查找     map <F6> :Grep                imap <F6> <ESC>:Grep 
" F7 开始替换      map <F7> :Replace             imap <F7> <ESC>:Replace  

" C，C++ ,Java,Python按F8编译运行

"F9—C，C++ ,Python的调试

" 映射全选+复制 ctrl+a          map <C-A> ggVGY          map! <C-A> <Esc>ggVGY

"F2-去空行  nnoremap <F2> :g/^\s*$/d<CR> 
"比较文件  nnoremap <C-F2> :vert diffsplit 

"新建tab  Ctrl+T               nnoremap <C-t>:tabnew<CR>         inoremap <C-t> <Esc>:tabnew<CR>

" quickfix模式<leader>逗号+空格—执行保存文件执行make命令
autocmd FileType c,cpp map <buffer> <leader>q<space> :w<cr>:make<cr>

"-----------------------------------------------------------------
" plugin - indentLine
" vim垂直缩进对齐线插件——indentLine
"-----------------------------------------------------------------
" 开启/关闭对齐线   nmap <leader>il :IndentLinesToggle<CR>

"-----------------------------------------------------------------
" 插件fholgado/minibufexpl.vim
" 多文档编辑
"-----------------------------------------------------------------
"使用Ctrl+F关闭Buffer中的一个文件 imap，vmap，nmap
" buffer 切换快捷键，默认方向键左右可以切换buffer    map <C-N> :MBEbn<cr>     map <C-H> :MBEbp<cr>

"-----------------------------------------------------------------
" davidhalter/jedi-vim'
" Python语法提示
"-----------------------------------------------------------------
"Goto assignments(typical goto function)      let g:jedi#goto_assignments_command = "<leader>ja"

"Goto definitions(follow identifier as far as possible,includes imports and statements)
let g:jedi#goto_definitions_command = "<leader>jd"

"how Documentation/Pydoc K (shows a popup with assignments)         let g:jedi#documentation_command = "K"

"Usages <leader>ju (shows all the usages of a name)          let g:jedi#usages_command = "<leader>ju"

let g:jedi#rename_command = "<leader>jr"    "Renaming

"Completion  let g:jedi#completions_command = "<C-S-x>" 

" 设置FuzzyFinder
map <leader>fF :FufFile<CR>
map <leader>ff :FufTaggedFile<CR>
map <leader>fg :FufTag<CR>
map <leader>fb :FufBuffer<CR>

" -----------------------------------------------------------------------------
"  < a.vim 插件配置 >  用于切换C/C++头文件
" -----------------------------------------------------------------------------
" :A     ---切换头文件并独占整个窗口
" :AV    ---切换头文件并垂直分割窗口
" :AS    ---切换头文件并水平分割窗口
" :close
" :only

" -----------------------------------------------------------------------------
"  < SrcExpl 插件配置 > 增强源代码浏览，其功能就像Windows中的"Source Insight"
" -----------------------------------------------------------------------------
nmap <C-m>s :SrcExplToggle<CR>                "打开/闭浏览窗口
let g:SrcExpl_jumpKey = "<C-m><ENTER>" 
let g:SrcExpl_gobackKey = "<C-m><SPACE>"
let g:SrcExpl_prevDefKey = "<C-m><F3>" 
let g:SrcExpl_nextDefKey = "<C-m><F4>"